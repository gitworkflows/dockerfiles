#
# NOTE: THIS DOCKERFILE IS GENERATED VIA "apply-templates.sh"
#
# PLEASE DO NOT EDIT IT DIRECTLY.
#

FROM debian:bookworm-slim

# runtime deps
RUN set -eux; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
		ca-certificates \
		wget \
	; \
	rm -rf /var/lib/apt/lists/*

# https://github.com/docker/docker/tree/master/hack/dind
ENV DIND_COMMIT 65cfcc28ab37cb75e1560e4b4738719c07c6618e
RUN set -eux; \
	wget -O /usr/local/bin/dind "https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind"; \
	sh -n /usr/local/bin/dind; \
	chmod +x /usr/local/bin/dind

# https://github.com/opencontainers/runc/releases
ENV RUNC_VERSION 1.2.0
RUN set -eux; \
	dpkgArch="$(dpkg --print-architecture)"; \
	case "$dpkgArch" in \
		'amd64') url='https://github.com/opencontainers/runc/releases/download/v1.2.0/runc.amd64'; sha256='3bbb68e49bc89dd2607f11d2ff0fa699963ebada39c32ad8a6aab0d40435c1ed' ;; \
		'i386') url='https://github.com/opencontainers/runc/releases/download/v1.2.0/runc.386'; sha256='76b9457f98fe791f30bf8067fd17e7fabd85500dc1caf941e0387ad51643a3b1' ;; \
		'arm64') url='https://github.com/opencontainers/runc/releases/download/v1.2.0/runc.arm64'; sha256='3d4f66dc1d91f1b2a46713d185a506a604f1fe9f2f2b89c281eb1c5c13677ff0' ;; \
		'armhf') url='https://github.com/opencontainers/runc/releases/download/v1.2.0/runc.armhf'; sha256='3c908e8c937c9e6a741b95420a808f7458398dcbad7e8afcfb1ce84d5b5f7234' ;; \
		'ppc64el') url='https://github.com/opencontainers/runc/releases/download/v1.2.0/runc.ppc64le'; sha256='0bd876309958ec00a0e86df3f549f025ad7ae32d981536c1a2932465b479be70' ;; \
		'riscv64') url='https://github.com/opencontainers/runc/releases/download/v1.2.0/runc.riscv64'; sha256='c787d64229b2e4321bd8f2603b33688b02acee71c34d1ede8d9148b96e7bf2c7' ;; \
		's390x') url='https://github.com/opencontainers/runc/releases/download/v1.2.0/runc.s390x'; sha256='57c6d428f486907f85a65754436a2f83508503ba386cc9243729150ac10b22df' ;; \
		*) echo >&2 "error: unsupported architecture: '$dpkgArch'"; exit 1 ;; \
	esac; \
# TODO $url.asc (see https://github.com/opencontainers/runc/releases)
	wget -O /usr/local/bin/runc "$url" --progress=dot:giga; \
	echo "$sha256 */usr/local/bin/runc" | sha256sum --strict --check -; \
	chmod +x /usr/local/bin/runc; \
	runc --version

# https://github.com/containerd/containerd/releases
ENV CONTAINERD_VERSION 2.0.0-rc.5
RUN set -eux; \
	dpkgArch="$(dpkg --print-architecture)"; \
	case "$dpkgArch" in \
		'amd64') url='https://github.com/containerd/containerd/releases/download/v2.0.0-rc.5/containerd-2.0.0-rc.5-linux-amd64.tar.gz'; sha256='84d4c3fc58a234df4306619100af94de78d08de4020a0b8e3c53465fc5080d38' ;; \
		'arm64') url='https://github.com/containerd/containerd/releases/download/v2.0.0-rc.5/containerd-2.0.0-rc.5-linux-arm64.tar.gz'; sha256='6fe1ee41ee64d8a0f9f1fbe0d5e537f3334c1a6c649be8294f62559e79f7dbee' ;; \
		'ppc64el') url='https://github.com/containerd/containerd/releases/download/v2.0.0-rc.5/containerd-2.0.0-rc.5-linux-ppc64le.tar.gz'; sha256='a46f9c076d1fb4ac8ffdc7ebcee8c461ac3615e41e41e52c4f3017ff16033b1d' ;; \
		'riscv64') url='https://github.com/containerd/containerd/releases/download/v2.0.0-rc.5/containerd-2.0.0-rc.5-linux-riscv64.tar.gz'; sha256='0e500c0259ee34b859bc5612ff9532685cf5b62f8ad1aa4ee8abd606f859e30e' ;; \
		's390x') url='https://github.com/containerd/containerd/releases/download/v2.0.0-rc.5/containerd-2.0.0-rc.5-linux-s390x.tar.gz'; sha256='dee584574d351df005ba85779012543d140fc3e04ba7d4eada3e226214d314d1' ;; \
		*) echo >&2 "error: unsupported architecture: '$dpkgArch'"; exit 1 ;; \
	esac; \
	wget -O containerd.tar.gz "$url" --progress=dot:giga; \
	echo "$sha256 *containerd.tar.gz" | sha256sum --strict --check -; \
	tar -xvf containerd.tar.gz -C /usr/local/; \
	rm containerd.tar.gz; \
	containerd --version

RUN set -eux; \
	mkdir -p /run/containerd /var/lib/containerd; \
	chmod 1777 /run/containerd /var/lib/containerd

VOLUME /var/lib/containerd

# add an entrypoint that does clever things if the container is run as non-root (cannot run containers, but content/image stores should work fine)
COPY docker-entrypoint.sh /usr/local/bin/
ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["containerd"]

# the entrypoint will try to automatically determine intent based on uid/gid (and include the "dind" wrapper automatically)
# if it does not, use "docker run ... dind containerd" if you want to run real containers (with "--privileged")
